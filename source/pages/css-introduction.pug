extends ../pug/layout.pug

block header
  +header(true, '2.1 Основы CSS')
    block navigation
      section.table-of-content
        ol.table-of-content__list
          li.table-of-content__item HTML
            ol.table-of-content__list
              li.table-of-content__item.table-of-content__item--sub
                a.table-of-content__item-link(href='html-introduction.html') Основы HTML
          li.table-of-content__item CSS
            ol.table-of-content__list
              li.table-of-content__item.table-of-content__item--sub
                a.table-of-content__item-link.table-of-content__item-link--current Основы CSS
          li.table-of-content__item JavaScript
            ol.table-of-content__list
              li.table-of-content__item.table-of-content__item--sub
                a.table-of-content__item-link(href='js-introduction.html') Основы JavaScript

        ol.table-of-content__list
          li.table-of-content__item
            a.table-of-content__item-link(href='math-in-web.html') Математика в вебе

block content
  +pageTitle('2.1 Основы CSS')

  section.page-section
    h2.visually-hidden Введение

    p.page-section__text CSS (Cascading Style Sheets) — это код, который используется для стилизации вашей веб-страницы. Основы CSS помогут понять, что нужно для начала работы. Ниже будут даны ответы на такие вопросы как: "Как сделать мой текст черным или красным?" "Как сделать так, чтобы контент появлялся в определенном месте на экране?" "Как украсить мою веб-страницу с помощью фоновых изображений и цветов?" и другие.

  section.page-section
    h2.page-section__title План раздела

    ol.page-section__content.table-of-content
      li.table-of-content__item
        a.table-of-content__anchor(href='#css-really') Что же представляет из себя CSS?
      li.table-of-content__item
        a.table-of-content__anchor(href='#css-rules') Анатомия CSS-правил
      li.table-of-content__item
        a.table-of-content__anchor(href='#types-of-css') Виды таблиц стилей и их особенности
        ol.table-of-content__sublist
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#external-css') Внешняя таблица стилей
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#internal-css') Внутренние стили
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#inline-css') Инлайновые стили
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#import-css') Правило #[code.language-css @import]
      li.table-of-content__item
        a.table-of-content__anchor(href='#css-selectors') Виды селекторов
        ol.table-of-content__sublist
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#base-selectors') Базовые селекторы
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#pseudoselectors') Псевдоселекторы
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#combinators') Комбинаторы
      li.table-of-content__item
        a.table-of-content__anchor(href='#inheritence-n-cascade') Наследование и каскад
        ol.table-of-content__sublist
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#inheritance') Наследование
          li.table-of-content__subitem
            a.table-of-content__anchor(href='#cascade') Каскад
            ol.table-of-content__subsublist
              li.table-of-content__subsubitem
                a.table-of-content__anchor(href='#important') Правило #[code.language-css !important]
              li.table-of-content__subsubitem
                a.table-of-content__anchor(href='#specificity') Специфичность
              li.table-of-content__subsubitem
                a.table-of-content__anchor(href='#css-order') Порядок подключённых таблиц

  section.page-section
    h2.page-section__title#css-really 1. Что же представляет из себя CSS?

    dl.page-section__determinations.determinations
      .determinations__item
        dt.determinations__item-name CSS
        dd.determinations__item-data Как и HTML, CSS на самом деле не является языком программирования. Это не язык разметки - это язык таблицы стилей. Это означает, что он позволяет применять стили выборочно к элементам в документах HTML.
        dd.determinations__item-data
          p.determinations__item-data-paragraph Обычно CSS-стили используются для создания и изменения стиля элементов веб-страниц и пользовательских интерфейсов, написанных на языках HTML и XHTML, но также могут быть применены к любому виду XML-документа, в том числе XML, SVG и XUL. Отделяя стиль представления документов от содержимого документов, CSS упрощает создание веб-страниц и обслуживание сайтов.
          p.determinations__item-data-paragraph CSS поддерживает таблицы стилей для конкретных носителей, поэтому авторы могут адаптировать представление своих документов к визуальным браузерам, слуховым устройствам, принтерам, брайлевским устройствам, карманным устройствам и т.д.
        dd.determinations__item-data Каскадные таблицы стилей описывают правила форматирования элементов с помощью свойств и допустимых значений этих свойств. Для каждого элемента можно использовать ограниченный набор свойств, остальные свойства не будут оказывать на него никакого влияния.

  section.page-section
    h2.page-section__title#css-rules 2. Анатомия CSS-правил

    p.page-section__text Рассмотрим подробнее структуру css-правил.

    figure.page-section__figure
      img.page-section__img(src='img/css-rule.png', alt='Пример css-правила')
      figcaption.page-section__img-caption Рисунок 1. Структура объявления

    p.page-section__text Вся структура называется набором правил (но зачастую для краткости "правило" ) и состоит из двух основных частей: селектора и объявления.

    dl.page-section__determinations.determinations
      .determinations__item
        dt.determinations__item-name Селектор (Selector)
        dd.determinations__item-data Это имя HTML элемента в начале набора правил. Он выбирает элемент(ы) для применения стиля (в данном случае, элементы #[code.language-css p]). Для стилизации другого элемента, просто измените селектор. В HTML имена элементов нечувствительны к регистру, поэтому #[code.language-css p] работает так же, как и #[code.language-css P].
      .determinations__item
        dt.determinations__item-name Объявление (Declaration)
        dd.determinations__item-data Блок правил в фигурных скобках #[code.language-css {...}], например #[code.language-css color: red;] указывает, какие из свойств элемента вы хотите стилизовать. Каждое правило, в свою очередь, состоит из свойства и присваемого ему значения.
      .determinations__item
        dt.determinations__item-name Свойства (Properties)
        dd.determinations__item-data Это указания конкретных характеристик определенного HTML элемента, которые нужно изменить (в данном случае, #[code.language-css color] является свойством для элементов #[code.language-html= '<p>']). В CSS вы выбираете, какие свойства вы хотите затронуть в вашем правиле.
      .determinations__item
        dt.determinations__item-name Значение свойства (Property value)
        dd.determinations__item-data Это запись, находящаяся напротив свойства, справа после двоеточия, и выбирающая одно из множества возможных значений для данного свойства (существует множество значений #[code.language-css color], помимо #[code.language-css red]).

      p.page-section__text Важные синтаксические моменты:

      ul.page-section__list.list
        li.list__item Каждый набор правил (кроме селектора) должен быть обернут в фигурные скобки (#[code.language-css {}]).
        li.list__item В каждом объявлении необходимо использовать двоеточие (#[code.language-css :]), чтобы отделить свойство от его значений.
        li.list__item В каждом наборе правил вы должны использовать точку с запятой (#[code.language-css ;]), чтобы отделить каждое объявление от следующего.

  section.page-section
    h2.page-section__title#types-of-css 3. Виды таблиц стилей и их особенности

    p.page-section__text Все описанные ниже методы использования CSS могут применяться как самостоятельно, так и в сочетании друг с другом. В этом случае необходимо помнить об их иерархии — механизме каскада, и правилах наследования, речь об этих важнейших принципах пойдёт ниже.

    section.page-section__subsection
      h3.page-section__subtitle#external-css 3.1 Внешняя таблица стилей

      p.page-section__text Внешняя таблица стилей, или таблицы связанных стилей, представляет собой текстовый файл с расширением .css, в котором находится набор CSS-стилей элементов. Файл создаётся в редакторе кода, так же как и HTML-страница. Внутри файла могут содержатся только стили, без HTML-разметки. Внешняя таблица стилей подключается к веб-странице с помощью тега #[code.language-html= '<link>'] с атрибутом #[code.language-none= 'rel="stylesheet"'], расположенного внутри раздела #[code.language-html= '<head></head>']. Такие стили работают для всех страниц сайта, на которых они подключены.

      p.page-section__text К каждой веб-странице может быть подключено сколько угодно таблиц стилей с помощью последовательного указания нескольких тегов #[code.language-html= '<link>']. В атрибуте #[code.language-none media] можно указать назначение конкретной таблицы стилей.

      pre.line-numbers(data-language='html')
        code.language-html
          | &lt;head&gt;
          |   &lt;link rel="stylesheet" href="css/style.css"&gt;
          |   &lt;link rel="stylesheet" href="css/assets.css" media="all"&gt;
          | &lt;/head&gt;

      p.page-section__text Для тега #[code.language-html= '<link>'] также предусмотрен атрибут #[code.language-none= 'type'], с зарезервированным для таблиц стилей значением #[code.language-none= '"text/css"']. Данный атрибут не является обязательным по стандарту HTML5, поэтому его можно не указывать. Если атрибут отсутствует, по умолчанию используется значение #[code.language-none= 'type="text/css"'].

      p.page-section__text Внешние таблицы стилей используются для большого объёма правил, например, для всей страницы. Также таким образом подключаются стилевые файлы сторонних плагинов и библиотек, необходимых для функционирования сайта.

      p.page-section__text Вынесение стилевых правил в отдельных файл позволяет:

      ul.page-section__list.list
        li.list__item реиспользовать их без необходимости дублирования;
        li.list__item вносить изменения в одном файле, меняя таким образом сразу все страницы, к которым подключена таблица стилей;
        li.list__item ускорить загрузку страниц сайта, т.к. при первой загрузке файл будет помещён в кэш и при загрузке других страниц с данными стилями будет уже "на месте".

    section.page-section__subsection
      h3.page-section__subtitle#internal-css 3.2 Внутренние стили

      p.page-section__text Внутренние, или встроенные, стили встраиваются в раздел #[code.language-html= '<head></head>'] HTML-документа и определяются внутри тега #[code.language-html= '<style></style>']. Внутренние стили имеют приоритет над внешними, но уступают инлайновым стилям.

      pre.line-numbers(data-language='html')
        code.language-html
          | &lt;head&gt;
          |   &lt;style&gt;
          |     h1,
          |     h2 {
          |       color: red;
          |       font-family: "Times New Roman", Georgia, Serif;
          |       line-height: 1.3em;
          |     }
          |   &lt;/style&gt;
          | &lt;/head&gt;
          | &lt;body&gt;
          |   ..
          | &lt;/body&gt;

      p.page-section__text Внутренние стили по гибкости уступают внешним файлам, однако могут быть неплохим решением, если нужно написать небольшое количество правил, специфичных для одной конкретной страницы.

    section.page-section__subsection
      h3.page-section__subtitle#inline-css 3.3 Инлайновые стили

      p.page-section__text Встроенные, или внутренние, стили записываются непосредственно внутри целевого элемента, с помощью атрибута #[code.language-none style]. Такие стили ещё называют инлайновыми.

      p.page-section__text Такие стили действуют только на тот элемент, для которого они заданы, и имеют приоритет над всеми остальными стилями.

      p.page-section__text Рекомендуется использовать внутренний стиль для одиночных тегов или отказаться от его использования вообще, поскольку изменение ряда элементов становится проблематичным. Внутренние стили не соответствуют идеологии структурного документа, когда содержимое и его оформление разделены.

    section.page-section__subsection
      h3.page-section__subtitle#import-css 3.4 Правило #[code.language-css @import]

      p.page-section__text Правило #[code.language-css @import] позволяет встраивать внешние таблицы стилей в пользовательские. Чтобы директива `@import` работала, она должна располагаться в таблице стилей (внешней или внутренней, но никак не в инлайновых стилях) перед всеми остальными правилами.

      p.page-section__text Правило #[code.language-css @import] может использоваться, например, для подключения веб-шрифтов.

      pre.line-numbers(data-language='html')
        code.language-html
          | &lt;style&gt;
          |   @import url(https://fonts.googleapis.com/css?family=Open+Sans&amp;subset=latin,cyrillic);
          |   @import url(mobile.css);
          |
          |   p {
          |     font-size: 0.9em;
          |     color: grey;
          |   }
          | &lt;/style&gt;

  section.page-section
    h2.page-section__title#css-selectors 4. Виды селекторов

    p.page-section__text Селекторы представляют структуру веб-страницы. С их помощью создаются правила для форматирования элементов веб-страницы. Селекторами могут быть элементы, их классы и идентификаторы, а также псевдоклассы и псевдоэлементы.

    section.page-section__subsection
      h3.page-section__subtitle#base-selectors 4.1 Базовые селекторы

      dl.page-section__determinations.determinations
        .determinations__item
          dt.determinations__item-name Универсальный селектор
          dd.determinations__item-data
            p.determinations__item-data-paragraph Выбирает все элементы. По желанию он может быть ограничен определенным пространством имен или относиться ко всему пространству имён.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css * ns|* *|*]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css * {margin: 0;}] "обнулит" внешние отступы у всех элементов на странице.
        .determinations__item
          dt.determinations__item-name Селектор по тегу
          dd.determinations__item-data
            p.determinations__item-data-paragraph Этот базовый селектор выбирает тип элементов, к которым будет применяться правило.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css элемент]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css h2 {font-family: Lobster, cursive;}] задаст общий стиль для форматирования всех заголовков второго уровня.
        .determinations__item
          dt.determinations__item-name Селектор по классу
          dd.determinations__item-data
            p.determinations__item-data-paragraph Селекторы класса позволяют задавать стили для одного и более элементов с одинаковым именем класса (значение атрибута class), размещенных в разных местах страницы или на разных страницах сайта. Стили, созданные с помощью класса, можно применять к другим элементам, не обязательно данного типа.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css= '.имяКласса']
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css= '.headline {text-transform: uppercase;}'] будет действовать на все элементы с классом headline.
        .determinations__item
          dt.determinations__item-name Селектор по идентификатору
          dd.determinations__item-data
            p.determinations__item-data-paragraph Этот базовый селектор выбирает элементы, основываясь на значении их id атрибута. Не забывайте, что идентификатор должен быть уникальным, т. е. использоваться только для одного элемента в HTML-документе.
            p.determinations__item-data-paragraph В имени идентификатора не должно быть пробелов. Нет никаких других ограничений на то, какую форму может принимать id, в частности, идентификаторы могут состоять только из цифр, начинаться с цифры, начинаться с подчеркивания, состоять только из знаков препинания и т. д.
            p.determinations__item-data-paragraph Уникальный идентификатор элемента может использоваться для различных целей, в частности, как способ ссылки на конкретные части документа с использованием идентификаторов фрагментов, как способ нацеливания на элемент при создании сценариев и как способ стилизации конкретного элемента из CSS.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css= '#имяИдентификатора']
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css= '#sidebar {width: 300px;}'] подействует только на элемент с идентификатором sidebar.
        .determinations__item
          dt.determinations__item-name Селекторы по атрибуту
          dd.determinations__item-data
            p.determinations__item-data-paragraph Селекторы атрибутов выбирают элементы на основе имени атрибута или значения атрибута.
            p.determinations__item-data-paragraph #[strong Синтаксис:]
            ul.determinations__item-data-variants.list
              li.list__item #[code.language-css= '[attr ~= value]'] — выберет все элементы, содержащие указанный атрибут и хотя бы частично содержащие искомое значение;
              li.list__item #[code.language-css= '[attr = value]'] — выберет все элементы, содержащие указанный атрибут с конкретным значением;
              li.list__item #[code.language-css= '[attr ~= value]'] — выберет все элементы, содержащие указанный атрибут и хотя бы частично содержащие искомое значение;
              li.list__item #[code.language-css= '[attr |= value]'] — выберет все элементы, список значений указанного атрибута которых начинается с конкретного слова;
              li.list__item #[code.language-css= '[attr ^= value]'] — выберет все элементы, значение нужного атрибута которых начинается с указанного значения;
              li.list__item #[code.language-css= '[attr $= value]'] — выберет все элементы, значение нужного атрибута которых заканчивается указанным значением;
              li.list__item #[code.language-css= '[attr *= value]'] — выберет все элементы, значение атрибута которых содержит в любом месте указанное слово;

    section.page-section__subsection
      h3.page-section__subtitle#pseudoselectors 4.2 Псевдоселекторы

      dl.page-section__determinations.determinations
        .determinations__item
          dt.determinations__item-name Псевдоклассы
          dd.determinations__item-data Это классы, фактически не прикрепленные к HTML-тегам. Они позволяют применить CSS-правила к элементам при совершении события или подчиняющимся определенному правилу.
          dd.determinations__item-data
            p Псевдоклассы состояний характеризуют элементы со следующими свойствами:
            ul
              li #[code.language-css :link] — непосещенная ссылка;
              li #[code.language-css :visited] — посещенная ссылка;
              li #[code.language-css :hover] — любой элемент, по которому проводят курсором мыши;
              li #[code.language-css :focus] — интерактивный элемент, к которому перешли с помощью клавиатуры или активировали посредством мыши;
              li #[code.language-css :active] — элемент, который был активизирован пользователем;
              li #[code.language-css :valid] — поля формы, содержимое которых прошло проверку в браузере на соответствие указанному типу данных;
              li #[code.language-css :invalid] — поля формы, содержимое которых не соответствует указанному типу данных;
              li #[code.language-css :enabled] — все активные поля форм и кнопки;
              li #[code.language-css :disabled] — заблокированные поля форм и кнопки, т.е., находящиеся в неактивном состоянии;
              li #[code.language-css :in-range] — поля формы, значения которых находятся в заданном диапазоне;
              li #[code.language-css :out-of-range] — поля формы, значения которых не входят в установленный диапазон;
              li #[code.language-css= ':lang()'] — элементы с текстом на указанном языке;
              li #[code.language-css= ':not(селектор)'] — элементы, которые не содержат указанный селектор;
              li #[code.language-css :target] — элемент с символом #, на который ссылаются в документе;
              li #[code.language-css :checked] — выделенные (выбранные пользователем) элементы формы.
          dd.determinations__item-data
            p Структурные псевдоклассы отбирают дочерние элементы в соответствии с параметром, указанным в круглых скобках:
            ul
              li #[code.language-css= ':nth-child(odd)'] — нечётные дочерние элементы;
              li #[code.language-css= ':nth-child(even)'] — чётные дочерние элементы;
              li #[code.language-css= ':nth-child(3n)'] — каждый третий элемент среди дочерних;
              li #[code.language-css= ':nth-child(3n+2)'] — выбирает каждый третий элемент, начиная со второго дочернего элемента (+2);
              li #[code.language-css= ':nth-child(n+2)'] — выбирает все элементы, начиная со второго;
              li #[code.language-css= ':nth-child(3)'] — выбирает третий дочерний элемент;
              li #[code.language-css= ':nth-last-child()'] — в списке дочерних элементов выбирает элемент с указанным местоположением, аналогично с :nth-child(), но начиная с последнего, в обратную сторону;
              li #[code.language-css :first-child] — позволяет оформить только самый первый дочерний элемент тега;
              li #[code.language-css :last-child] — позволяет форматировать последний дочерний элемент тега;
              li #[code.language-css :only-child] — выбирает элемент, являющийся единственным дочерним элементом;
              li #[code.language-css :empty] — выбирает элементы, у которых нет дочерних элементов;
              li #[code.language-css :root] — выбирает элемент, являющийся корневым в документе — элемент html.
          dd.determinations__item-data
            p Селекторы структурных псевдоклассов типа указывают на конкретный тип дочернего тега:
            ul
              li #[code.language-css= ':nth-of-type()'] — выбирает элементы по аналогии с :nth-child(), при этом берёт во внимание только тип элемента;
              li #[code.language-css :first-of-type] — выбирает первый дочерний элемент данного типа;
              li #[code.language-css :last-of-type] — выбирает последний элемент данного типа;
              li #[code.language-css= ':nth-last-of-type()'] — выбирает элемент заданного типа в списке элементов в соответствии с указанным местоположением, начиная с конца;
              li #[code.language-css :only-of-type] — выбирает единственный элемент указанного типа среди дочерних элементов родительского элемента.
        .determinations__item
          dt.determinations__item-name Псевдоэлементы
          dd.determinations__item-data Псевдоэлементы позволяют стилизовать определённую часть выбранных элементов или задать стили для элементов не определённых в дереве элементов документа, а также генерировать содержимое, которого нет в исходном коде текста. Псевдоэлементы похожи на псевдоклассы и для более простого их различения принято обозначать псевдоэлементы двумя двоеточиями вместо одного.
          dd.determinations__item-data
            p Наиболее известные псевдоэлменты:
            ul
              li #[code.language-css ::first-letter] — выбирает первую букву каждого абзаца, применяется только к блочным элементам;
              li #[code.language-css ::first-line] — выбирает первую строку текста элемента, применяется только к блочным элементам;
              li #[code.language-css ::before] — вставляет генерируемое содержимое перед элементом;
              li #[code.language-css ::after] — добавляет генерируемое содержимое после элемента;
              li #[code.language-css ::cue] — может быть использован для задания стилей титров и других реплик в медиа с VTT треками;
              li #[code.language-css ::selection] — позволяет применить стили к части документа, который был выделен пользователем (например, с помощью мыши);
              li #[code.language-css ::backdrop] — это прямоугольник с размерами окна, который отрисовывается сразу же после отрисовки любого элемента в полноэкранном режиме. Это включает элементы, установленные в полноэкранный режим с помощью Fullscreen API и элементы #[code.language-html= '<dialog>'].
              li #[code.language-css ::placeholder] — представляет собой текст placeholder в #[code.language-html= '<input>'] или #[code.language-html= '<textarea>'] элементах.

    section.page-section__subsection
      h3.page-section__subtitle#combinators 4.3 Комбинаторы

      dl.page-section__determinations.determinations
        .determinations__item
          dt.determinations__item-name Комбинатор запятая
          dd.determinations__item-data
            p.determinations__item-data-paragraph Комбинатор сгруппирует выбранные селекторы и применит заданные свойства сразу ко всей группе
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css A, B]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css div, span{}] выберет все элементы #[code.language-html= 'div'] и #[code.language-html= 'span'] на странице
        .determinations__item
          dt.determinations__item-name Комбинатор потомков
          dd.determinations__item-data
            p.determinations__item-data-paragraph Комбинатор выбирает элементы, которые находятся внутри указанного первым элемента (вне зависимости от уровня вложенности).
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css A B]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css div span] выберет все #[code.language-html= 'span'], находящиеся внутри любых #[code.language-html= 'div'] на странице
        .determinations__item
          dt.determinations__item-name Дочерние селекторы
          dd.determinations__item-data
            p.determinations__item-data-paragraph Комбинатор в отличие от комбинатора потомков выбирает только те элементы, которые являются дочерними непосредственно по отношению к указанному элементу.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css A > B]
            p.determinations__item-data-paragraph #[strong Пример:] селектор #[code.language-css div > span] выберет только дочерние элементы #[code.language-html= 'span'], которые находятся внутри, на первом уровне вложенности по отношению к элементу #[code.language-html= 'div']
        .determinations__item
          dt.determinations__item-name Комбинатор всех соседних элементов
          dd.determinations__item-data
            p.determinations__item-data-paragraph Комбинатор выбирает указанные элементы, которые находятся на этом же уровне вложенности, после указанного элемента, с тем же родителем.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css A ~ B]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css p ~ span] выберет все элементы #[code.language-html= 'span'], которые находятся после элемента #[code.language-html= 'p'] внутри одного родителя.
        .determinations__item
          dt.determinations__item-name Комбинатор следующего соседнего элемента
          dd.determinations__item-data
            p.determinations__item-data-paragraph Комбинатор выбирает элемент, который находится непосредственно после указанного элемента, если у них общий родитель.
            p.determinations__item-data-paragraph #[strong Синтаксис:] #[code.language-css A + B]
            p.determinations__item-data-paragraph #[strong Пример:] #[code.language-css p + span] выберет любой #[code.language-html= 'span'] элемент, который находится непосредственно после элемента #[code.language-html= 'p'].

  section.page-section
    h2.page-section__title#inheritence-n-cascade 5. Наследование и каскад

    p.page-section__text Наследование и каскад — два фундаментальных понятия в CSS, которые тесно связаны между собой. Наследование заключается в том, что элементы наследуют свойства от своего родителя (элемента, их содержащего). Каскад проявляется в том, как разные виды таблиц стилей применяются к документу, и как конфликтующие правила переопределяют друг друга.

    section.pagese-section__subsection
      h3.page-section__subtitle#inheritance 5.1 Наследование

      dl.page-section__determinations.determinations
        .determinations__item
          dt.determinations__item-name Наследование
          dd.determinations__item-data
            p.determinations__item-data-paragraph Механизм, с помощью которого определенные свойства передаются от предка к его потомкам.
            p.determinations__item-data-paragraph Спецификацией CSS предусмотрено наследование свойств, относящихся к текстовому содержимому страницы, таких как color, font, letter-spacing, line-height, list-style, text-align, text-indent, text-transform, visibility, white-space и word-spacing. Во многих случаях это удобно, так как не нужно задавать размер шрифта и семейство шрифтов для каждого элемента веб-страницы.
            p.determinations__item-data-paragraph Свойства, относящиеся к форматированию блоков, не наследуются. Это background, border, display, float и clear, height и width, margin, min-max-height и -width, outline, overflow, padding, position, text-decoration, vertical-align и z-index.

      p.page-section__text С помощью ключевого слова inherit можно принудить элемент наследовать любое значение свойства родительского элемента. Это работает даже для тех свойств, которые не наследуются по умолчанию.

      p.page-section__text Порядок наследования стилей: cтили могут наследоваться от родительского элемента (наследуемые свойства или с помощью значения inherit); cтили, расположенные в таблице стилей ниже, отменяют стили, расположенные в таблице выше.

      p.page-section__text К одному элементу могут применяться стили из разных источников. Проверить, какие стили применяются, можно в режиме разработчика браузера. Для этого над элементом нужно щёлкнуть правой кнопкой мыши и выбрать пункт «Посмотреть код» (или что-то аналогичное). В правом столбце будут перечислены все свойства, которые заданы для этого элемента или наследуются от родительского элемента, а также файлы стилей, в которых они указаны, и порядковый номер строки кода.

      figure.page-section__figure
        img.page-section__img(src='img/firefox-inspector-inheritance.png', alt='Инспектирование элемента в режиме разработчика в браузере Firefox Developer Edition')
        figcaption.page-section__img-caption Рисунок 2. С помощью инструментов разработчика в браузерах несложно посмотреть, какие стили наследуются элементом

    section.page-section__subsection
      h3.page-section__subtitle#cascade 5.2 Каскад

      dl.page-section__determinations.determinations
        .determinations__item
          dt.determinations__item-name Каскадирование
          dd.determinations__item-data Механизм, который управляет конечным результатом в ситуации, когда к одному элементу применяются разные CSS-правила. Существует три критерия, которые определяют порядок применения свойств — правило !important, специфичность и порядок, в котором подключены таблицы стилей.

      section.page-section__subsubsection
        h4.page-section__subsubtitle#important 5.2.1 Правило #[code.language-css !important]

        p.page-section__text Вес правила можно задать с помощью ключевого слова #[code.language-css !important], которое добавляется сразу после значения свойства, например, #[code.language-css= 'span {font-weight: bold!important;}']. Правило необходимо размещать в конец объявления перед закрывающей скобкой, без пробела. Такое объявление будет иметь приоритет над всеми остальными правилами. Это правило позволяет отменить значение свойства и установить новое для элемента из группы элементов в случае, когда нет прямого доступа к файлу со стилями.

      section.page-section__subsubsection
        h4.page-section__subsubtitle#specificity 5.2.2 Специфичность

        p.page-section__text Для каждого правила браузер вычисляет специфичность селектора, и если у элемента имеются конфликтующие объявления свойств, во внимание принимается правило, имеющее наибольшую специфичность. Значение специфичности состоит из четырех частей: 0, 0, 0, 0.

        p.page-section__text Специфичность селектора определяется следующим образом:

        ul.page-section__list.list
          li.list__item для id добавляется 0, 1, 0, 0;
          li.list__item для class добавляется 0, 0, 1, 0;
          li.list__item для каждого элемента и псевдоэлемента добавляется 0, 0, 0, 1;
          li.list__item для встроенного стиля, добавленного непосредственно к элементу — 1, 0, 0, 0;
          li.list__item универсальный селектор не имеет специфичности.

        pre.line-numbers(data-language='css')
          code.language-css
            | h1 {color: lightblue;} /*специфичность 0, 0, 0, 1*/
            | em {color: silver;} /*специфичность 0, 0, 0, 1*/
            | h1 em {color: gold;} /*специфичность: 0, 0, 0, 1 + 0, 0, 0, 1 = 0, 0, 0, 2*/
            | div#main p.about {color: blue;} /*специфичность: 0, 0, 0, 1 + 0, 1, 0, 0 + 0, 0, 0, 1 + 0, 0, 1, 0 = 0, 1, 1, 2*/
            | .sidebar {color: grey;} /*специфичность 0, 0, 1, 0*/
            | #sidebar {color: orange;} /*специфичность 0, 1, 0, 0*/
            | li#sidebar  {color: aqua;} /*специфичность: 0, 0, 0, 1 + 0, 1, 0, 0 = 0, 1, 0, 1*/


        p.page-section__text В результате к элементу применятся те правила, специфичность которых больше. Например, если на элемент действуют две специфичности со значениями 0, 0, 0, 2 и 0, 1, 0, 1, то выиграет второе правило.

      section.page-section__subsubsection
        h4.page-section__subsubtitle#css-order  5.2.3 Порядок подключённых таблиц

        p.page-section__text Вы можете создать несколько внешних таблиц стилей и подключить их к одной веб-странице. Если в разных таблицах будут встречаться разные значения свойств одного элемента, то в результате к элементу применится правило, находящееся в таблице стилей, идущей в списке ниже.

  .page-final
    p.page-final__sign Источники инофмации: #[a.link(href='https://html5book.ru/osnovy-css/') html5book] и #[a.link(href='https://developer.mozilla.org/ru/docs/Learn/Getting_started_with_the_web/CSS_basics') MDN]. Приводится в авторской редакции.

    .page-final__links
      a.link.link--index(href='#') Предыдущий раздел
      a.link.link--index.link--index-main(href='index.html') Главная
      a.link.link--index.link--index-forward(href='#') Следующий раздел

block footer
  footer.page-footer
    p.page-footer__author © Марина Калюжная, 2020

block page-bottom
